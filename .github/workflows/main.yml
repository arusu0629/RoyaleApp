name: CI

on:
  push:
    branches:
      - master
      - develop
      - feature/updateXcode13
    paths-ignore:
      - Templates/**
      - README.md
      - Rambafile

env: 
  DEVELOPER_DIR: /Applications/Xcode_13.1.app/Contents/Developer

jobs:
  test:
    runs-on: macos-11
    env:
      MINT_PATH: mint/lib
      MINT_LINK_PATH: mint/bin

    steps:
    # チェックアウト
    - uses: actions/checkout@v2

    # Xcode 出力一覧
    - name: Show Xcode list
      run: ls /Applications | grep 'Xcode'

    # Xcode バージョン出力
    - name: Show Xcode version
      run: xcodebuild -version

    # Mint のインストール
    - name: Install Mint
      run: brew install mint

    # Mint で管理しているライブラリのキャッシュ復元
    - name: Cache Mint packages
      uses: actions/cache@v2
      with:
        path: mint
        key: ${{ env.cache-version }}-${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
        restore-keys: |
          ${{ env.cache-version }}-${{ runner.os }}-mint-

    # Carthage で管理しているライブラリのキャッシュ復元
    - name: Cache Carthage packages
      uses: actions/cache@v2
      with:
        path: Carthage
        key: ${{ env.cache-version }}-${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
        restore-keys: |
          ${{ env.cache-version }}-${{ runner.os }}-carthage-

    # Carthage のライブラリをインストール
    - name: Install Carthage Frameworks
      run: make install-carthage
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # SwiftPMで管理しているライブラリのキャッシュ
    - name: Cache libraries managed by SwiftPM
      uses: actions/cache@v2
      with:
        path: SourcePackages
        key: ${{ runner.os }}-swiftpm-${{ hashFiles('**/RoyaleApp.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swiftpm-


    # .XcodeProj の生成
    - name: Generate XcodeProject
      run: make generate-xcodeproj

    # ビルド
    - name: Xcode build
      run: make build-debug

    # ビルドログのアップロード
    - name: Upload build log Artifact
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: xcodebuild-logs
        path: xcodebuild_build.log
        if-no-files-found: ignore
        retention-days: 14

    # 端末の一覧出力
    - name: Show devices
      run: make show-devices

    # 単体テストの実行(今の所単体テストは無いのでコメントアウト)
    #- name: Xcode test
    #  run: make test
